#include "troleys.h"

// Функция для создания нового троллейбуса и добавления к нему остановок
void CreateTrl(map <string, set<string>>& Trolleybus) {
// принимает map, где ключ - название троллейбуса, значение - set из названий остановок
    string str = "";    // строка для сбора названий остановок
    char stop = 0;  // символ для чтения ввода посимвольно
    string trollName;   // строка для хранения названия троллейбуса
    cin >> trollName;   // считывание названия троллейбуса
    int noOnce = 0; // флаг для отслеживания того, была ли введена хотя бы одна остановка
    // Проверка, существует ли уже троллейбус с таким названием
    if (Trolleybus[trollName].empty()) {
        stop = getchar();   // строка считывает первый символ из ввода
        while (true) {  // бесконечный цикл, который продолжает считывать символы из ввода до тех пор, пока не будет достигнут конец ввода
            stop = getchar();   // снова считывается следующий символ
            // если считанный символ является пробелом - текущее слово (название остановки) закончилось 
            if (stop == ' ') {  
                // и оно добавляется в set остановок для соответствующего троллейбуса
                Trolleybus[trollName].insert(str);
                str = "";   // str сбрасывается для начала чтения следующего названия остановки
                noOnce = 1; // флаг noOnce устанавливается в 1, чтобы показать, что хотя бы одна остановка была добавлена
            }
            // если считанный символ является символом новой строки, это означает, что ввод закончен
            else if (stop == '\n') {
                // если хотя бы одна остановка была добавлена (noOnce равно 1)
                if (noOnce) {
                    Trolleybus[trollName].insert(str);  // то она также добавляется в set
                }
                // если не было добавлено ни одной остановки
                else {
                    cout << "Ошибка" << endl;   // то выводится сообщение об ошибке
                }
                // str сбрасывается и цикл прекращается
                str = "";
                break;
            }
            // если считанный символ не является пробелом или символом новой строки
            else {
                str += stop;    // то он добавляется к текущей строке str, которая собирается в название остановки
            }
        }
    }
    // если троллейбус с введенным названием уже существует
    else {
        stop = getchar();   // строка считывает первый символ из ввода, который в этом случае не используется
        while (stop != '\n') {  // цикл проходит по оставшейся части ввода до символа новой строки '\n', чтобы полностью игнорировать ввод
            stop = getchar();
        }
        cout << "Троллейбус уже существует" << endl;
    }
    // Проверка, была ли введена хотя бы одна остановка для нового троллейбуса
    if (noOnce == 0) {  // если не было введено ни одной остановки
        for (auto x = Trolleybus.begin(); x != Trolleybus.end();) { // цикл, который проходит по всем элементам map Trolleybus
            if (x->second.empty()) {    // проверка, является ли set остановок для текущего троллейбуса пустым (троллейбус не имеет ни одной остановки)
                x = Trolleybus.erase(x);    // строка удаляет текущий троллейбус из map и возвращает итератор на следующий элемент
            }
            else {  // если set остановок не пуст
                x++;    // итератор просто увеличивается, чтобы перейти к следующему троллейбусу
            }
        }
    }
}

// Функция для поиска всех троллейбусов, которые имеют определенную остановку
void TrlInStop(map <string, set<string>> Trolleybus) {
    string stoping; // строка для хранения названия остановки, которую пользователь хочет найти
    cin >> stoping; // считывание названия остановки
    cout << "Остановки совпадвют у троллейбусов номер ";
    // Цикл, который проходит по каждой паре "название троллейбуса - множество остановок" в map Trolleybus
    for (pair<string, set<string>> Troll : Trolleybus) {
        // Цикл, который проходит по каждой остановке в set остановок для текущего троллейбуса
        for (string stop : Troll.second) {
            // Проверка, совпадает ли текущая остановка с искомой остановкой
            if (stop == stoping) {  // если остановки совпадают
                cout << Troll.first << " "; // название троллейбуса выводится на экран
                // После вывода названия троллейбуса цикл прерывается, чтобы не проверять остальные остановки этого троллейбуса
                break;
            }
        }
    }
    cout << endl;   // выводится символ новой строки, чтобы завершить вывод
}

// Функция для вывода всех остановок для заданного троллейбуса и для вывода списка троллейбусов для каждой остановки
void StopsInTrl(map <string, set<string>> Trolleybus) {
    string trollName;   // строка для хранения названия троллейбуса, для которого пользователь хочет найти остановки
    cin >> trollName;   // считывание названия троллейбуса
    vector<string> stops;   // вектор строк для хранения всех остановок для заданного троллейбуса
    cout << "Все остановки троллейбуса " << trollName << " : ";
    // Цикл, который проходит по каждой остановке в set остановок для троллейбуса с названием trollName
    for (string i : Trolleybus[trollName]) {
        cout << i << ' ';   // вывод названия каждой остановки
        stops.push_back(i); // добавление названия каждой остановки в вектор stops
    }
    cout << endl;   // вывод символа новой строки после вывода всех остановок
    // Цикл, который проходит по каждой остановке, хранящейся в векторе stops
    for (string stoping : stops) {
        cout << " Для остановки " << stoping << " есть троллейбусы: ";
        // Цикл, который проходит по каждой паре "название троллейбуса - множество остановок" в map Trolleybus
        for (pair<string, set<string>> Troll : Trolleybus) {
            // Цикл, который проходит по каждой остановке в set остановок для текущего троллейбуса
            for (string stop : Troll.second) {
                // Проверка, совпадает ли текущая остановка с остановкой из вектора stops и является ли текущий троллейбус не запрашиваемым троллейбусом
                if (stop == stoping && Troll.first != trollName) {  // если остановки совпадают и троллейбус не является запрашиваемым
                    cout << Troll.first << " "; // то название троллейбуса выводится на экран
                    // После вывода названия троллейбуса цикл прерывается, чтобы не проверять остальные остановки этого троллейбуса
                    break;
                }
            }
        }
        cout << endl;   // вывод символа новой строки, чтобы завершить вывод для текущей остановки
    }
}

// Функция для вывода всех троллейбусов и их остановок
void Trls(map <string, set<string>> Trolleybus) {
    // Цикл, который проходит по каждой паре "название троллейбуса - множество остановок" в map Trolleybus
    for (pair<string, set<string>> Troll : Trolleybus) {
        cout << " Троллейбус " << Troll.first << " : "; // вывод названия текущего троллейбуса
        // Цикл, который проходит по каждой остановке в set остановок для текущего троллейбуса
        for (string stop : Troll.second) {  
            cout << stop << " ";    // вывод названия каждой остановки для текущего троллейбуса
        }
        cout << endl;   // вывод символа новой строки, чтобы завершить вывод для текущего троллейбуса
    }
}