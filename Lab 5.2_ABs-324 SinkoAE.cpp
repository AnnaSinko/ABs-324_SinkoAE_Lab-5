// Lab 5.2_ABs-324 SinkoAE.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <string>
#include <random>
#include <locale.h> //подключение библиотеки для задач связанных из локализацией

using namespace std;    //используем пространство имен std

// Структура
struct visitor {
    // Компоненты структуры
    string ticket;
};

int main() {
    setlocale(LC_ALL, "rus");   //установка русской локали

    int number; // для хранения количества окон в поликлиннике
    cout << "Введите кол-во окон\n";    // запрос количества окон
    cin >> number;  // считывание введенного значения
    
    vector<queue<visitor>> windows(number);
    // вектор для хранения очередей посетителей для каждого окна
    // queue адаптирует контейнер для предоставления очереди
    // количество очередей в векторе = введенному количеству окон

    vector<int> Time(number, 0);
    // вектор для хранения времени, которое потратил каждый посетитель в очереди (изначально все значения установлены в 0)

    string command; // для хранения введенной команды
    
    // Генерация случайных номеров билетов
    random_device ran;  // создается генератор случайных чисел
    uniform_int_distribution<> dist(1, 1000);   // устанавливается диапазон генерации - от 1 до 1000

    while (true) {  // бесконечный цикл, который будет продолжаться до тех пор, пока пользователь не введет команду "DISTRIBUTE"
        cout << "Введите команду (ENQUEUE/DISTRIBUTE) и время: ";   // запрос команды
        cin >> command; // ввод команды

        // Если пользователь ввел команду "ENQUEUE"
        if (command == "ENQUEUE") {
            int time;
            cin >> time;    // считывание времени посещения
            visitor person = { "T" + to_string(dist(ran)) };    // помещение времени и талона
            int minKol = 0;
            for (int i = 1; i < number; ++i) {
                if (Time[i] < Time[minKol]) {   // распределение в самое незанятое окно
                    minKol = i;
                }
            }
            windows[minKol].push(person);   // функция push() используется для вставки или «проталкивания» элемента наверх стека
            Time[minKol] += time;   // увеличивание времени в окне
            cout << "Ваш талон: " << person.ticket << endl; // вывод номера талона
        }
        // Если пользователь ввел команду "DISTRIBUTE" (конец)
        else if (command == "DISTRIBUTE") {
            // для каждого окна выводит номер окна, время, которое потрачено в очереди, и список талонов всех посетителей в этом окне
            for (int i = 0; i < number; ++i) {
                cout << "Окно " << i + 1 << " ( " << Time[i] << " минут) : ";
                int generalTime = 0;
                while (!windows[i].empty()) {    // если контейнер не пуст empty() вернет false
                    cout << windows[i].front().ticket;  // front возвращает ссылку на первый элемент в контейнере
                    windows[i].pop();   // удаление вверхнего элемента
                    if (!windows[i].empty()) {
                        cout << ", ";
                    }
                }
                cout << endl;
            }
            break;
        }
    }
}
// queue реализует очередь
// push() используется для добавления элемента в конец очереди
// pop() используется для удаления первого элемента из очереди
// front() возвращает ссылку на первый элемент в очереди
// empty() проверяет, является ли очередь пустой